public class CrudPermision {
  //define org namespace without __
    Private static final String ORGNAMESPACE = '';
    public enum CURDOpration {CREATE,MODIFY,READ,REMOVE}
    /*@Aim:Check object permision along with fls
     *@Param:query that needs to be cheked
	 *@Return:Boolean value for permisson
	 */
    public static Boolean checkCurd(String queryOrObjectName,CURDOpration opration){
        System.debug('checkCurd of util method');
        queryOrObjectName=queryOrObjectName.replaceAll('select','SELECT').replaceAll('from','FROM').replaceAll('where','WHERE');
        queryOrObjectName=queryOrObjectName.replaceAll('Select','SELECT').replaceAll('From','FROM').replaceAll('Where','WHERE');
        Map<String,List<String>> allFields=formateQuery(queryOrObjectName);
         
        Boolean isAccess=true;
         for(String objectName:allFields.keySet()){
            Schema.DescribeSObjectResult objSchema=getSchema(objectName);
            if(objSchema!=null){
                if(opration==CURDOpration.CREATE){
                    if(!objSchema.isCreateable()){
                       isAccess=false; 
                    }
                }
                else if(opration==CURDOpration.MODIFY){
                    if(objSchema.isUpdateable()){
                        List<String> fields=allFields.get(objectName);
                        for(String fName:fields){
                            if(!( objSchema.fields.getMap().containsKey(fName) 
                                 && 
                                 (objSchema.fields.getMap().get(fName)).getDescribe().isUpdateable()
                                )){
                                    isAccess=false;
                                    break;
                            }
                        }
                    }
                    else{
                        isAccess=false;
                    }
                    
                }
                else if(opration==CURDOpration.READ){
                    if(objSchema.isAccessible()){
                        List<String> fields=allFields.get(objectName);
                        for(String fName:fields){
                            if(!(objSchema.fields.getMap().containsKey(fName) 
                                 && 
                                 (objSchema.fields.getMap().get(fName)).getDescribe().isAccessible()
                                )){
                                    isAccess=false;
                                    break;
                                }
                        }
                    }
                    else{
                        isAccess=false;
                    }
                }
                else if(opration==CURDOpration.REMOVE){
                    if(!objSchema.isDeletable()){
                      isAccess=false;
                    }
                    
                }
                
            }
        }
        
        return isAccess;
    }
    //return schema of object
    private static Schema.DescribeSObjectResult getSchema(String objectName){
        try{
        	Schema.DescribeSObjectResult[] descResult = Schema.describeSObjects(new String[]{objectName});     
            if(descResult.size()>0){
                return descResult[0];
            }
            else{
                return null;
                
            }
        }
        catch(exception e){
            System.debug(e);
            return null;
        }
        
        
    }
   	//returns fieldnames and its object
    private static Map<String,List<String>> formateQuery(String query){
	query = removeAggrigateFunction(query);
        Map<String,List<String>> validate=new  Map<String,List<String>>();
        if(query.contains('FROM')){
        Integer numberOfQuerys=query.countMatches('FROM');
        if(numberOfQuerys==1){
            String ObjectName=getObjectName(query);
            List<String> fields=getFields(query);
            validate.put(ObjectName.trim(),fields);
        }
        if(numberOfQuerys==2){
            //finding index of inner query
            Integer startIndex=query.indexOf('(');
            Integer endIndex=query.indexOf(')');
            String innerQuery=query.substring(startIndex-1, endIndex+1);
            String orignalString=query.remove(innerQuery);
            
            //geting inner query object name 
            String innerQueryObjectName=getObjectName(innerQuery);
            // geting inner query  fields
            List<String> innerQueryfields=getFields(innerQuery);
            validate.put(innerQueryObjectName.trim(),innerQueryfields);
            //geting object name 
            String ObjectName=getObjectName(orignalString);
            // geting all fields
            List<String> fields=getFields(orignalString);
            validate.put(ObjectName.trim(),fields);
        }
        if(numberOfQuerys==3){
            //finding index of inner query 
            Integer startIndex=query.lastIndexOf('(');
            Integer endIndex=query.lastIndexOf(')');
            String innerQuery=query.substring(startIndex-1, endIndex+1);
            String orignalString=query.remove(innerQuery);
            //finding index of related query
            startIndex=query.IndexOf('(');
            endIndex=query.IndexOf(')');
            String realatedQuery=orignalString.substring(startIndex-1, endIndex+1);
            //orignal query
            orignalString=orignalString.remove(realatedQuery);
            //geting object name 
            String innerQueryObjectName=getObjectName(innerQuery);
            List<String> innerQueryfields=getFields(innerQuery);
             validate.put(innerQueryObjectName.trim(),innerQueryfields);
            //geting object name 
            String relatedObjectName=getObjectName(realatedQuery);
            List<String> relatedQueryfields=getFields(realatedQuery);
             validate.put(relatedObjectName.trim(),relatedQueryfields);
            //geting object name 
            String ObjectName=getObjectName(orignalString);
            List<String> fields=getFields(orignalString);
            validate.put(ObjectName.trim(),fields);
        }
        }
        else{
			validate.put(query,new List<String>());
        }
        return validate;
    }
    //returns object Name from query
    private static String getObjectName(String query){
        String ObjectName='';
            //geting object name 
            if(query.contains('WHERE')){
                ObjectName=query.substringBetween('FROM', 'WHERE');
            }
            else{
                ObjectName=query.substringAfter('FROM');
                List<String> temp=ObjectName.split(' ');
                for(String s:temp){
                    if(!String.isEmpty(s)){
                    	ObjectName=s;    
                        break;
					}
                }
            }
        ObjectName=ObjectName.remove('(');
        ObjectName=ObjectName.remove(')');
        ObjectName=addNameSpace(ObjectName);
      
      
        return ObjectName.trim();
    }
    //if org has namespace adds it to filed
    private static String addNameSpace(String value){
        if(!String.isEmpty(ORGNAMESPACE.trim())){
            if(value.contains('__')){
                List<String> parts=value.split('__');
                if(parts.size()==2){
                    value=ORGNAMESPACE.trim()+'__'+parts.get(0).trim()+'__'+parts.get(1).trim();
                }
            }
        }
        return value;
    }
    //returns list of fields form select part of query
    private static List<String> getFields(String query){
        // geting all fields
        String filedsString=query.substringBetween('SELECT', 'FROM');
        List<String> filds=filedsString.split(',');
        List<String> temp=new List<String>();
        for(String f:filds){
            //ignoring relation ship fields as we dont know there parent object
            if(!f.contains('.') && !String.isEmpty(f)){
                temp.add(addNameSpace(f.trim()));
            }
        }
         
       
        return temp;
    }
    
     private static String getAggrigateFunction(String query,String functionName){
        Integer index=query.indexOfIgnoreCase(functionName+'(');
        Integer aFunctionIndex=query.indexOf(functionName+'(');
        
        
        String firstQuery=query.substring(0,aFunctionIndex);
        
        String temp=query.substring(aFunctionIndex);
        Integer firstBrac=temp.indexOf(')');
        
        String aggrigatFunction=temp.substring(0,firstBrac);
        aggrigatFunction=aggrigatFunction.substring(aggrigatFunction.indexOf('(')+1);
        System.debug('aggrigatFunction '+aggrigatFunction);
        
        String lastQuery=temp.substring(temp.indexOf(')')+1);
        String q=firstQuery+aggrigatFunction+lastQuery;
        
        if(q.contains(functionName+'(')){
            return getAggrigateFunction(q,functionName);
        }
        System.debug('q=='+q);
        
        return q;
    }
    
    //remove aggrigate function from query
    private static String removeAggrigateFunction(String query){
        //if any aggrigate function needs to be added add new if condiition with function name
	
	
	//lines commented if query is not formated then uncomment
        /*query=query.replaceAll('( ', '(');
        query=query.replaceAll(' )', ')');*/
	
	
	
        if(query.contains('format')){
        	query=getAggrigateFunction(query,'format');    
        }
        if(query.contains('count')){
        	query=getAggrigateFunction(query,'count');    
        }
        if(query.contains('sum')){
        	query=getAggrigateFunction(query,'sum');    
        }
        if(query.contains('avg')){
        	query=getAggrigateFunction(query,'avg');    
        }
        if(query.contains('max')){
        	query=getAggrigateFunction(query,'max');    
        }
        
        
        
        
		return query;
    }

    
}
